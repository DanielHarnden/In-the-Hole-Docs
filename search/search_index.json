{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>In the Hole is made in Godot by Daniel Harnden and Zoe Mantle.</p> <p>Use the sidebar or the search bar to navigate this wiki.</p>"},{"location":"crafting/","title":"Icons","text":"<p>Icons are the main mechanic of the slot machine. Different combinations of icons provide different payouts, and can provide money or items.  </p>"},{"location":"crafting/#default-icons","title":"Default Icons","text":"<p>The slot machine starts with 7 icons:      </p>"},{"location":"crafting/#icon-types","title":"Icon Types","text":"<p>Fruit icons give the player money for the current run.  </p> <p>Weapon and Ability icons give the player items for the current run. </p> <p>Wild icons count as every icon at the same time, excluding wild icons and curse icons. </p> <p>Curse icons negatively impact the player by adding to their debt, removing icons, or adding additional curse icons. </p>"},{"location":"crafting/#icon-rarity","title":"Icon Rarity","text":"<p>Each icon has a <code>rarity</code> value defined in its metadata, represented as an integer. This integer maps to a named rarity (e.g., Common, Uncommon, etc.) for ease of communication. Additionally, each rarity is assigned a <code>commonality</code> value that determines how likely it is to appear in the slot machine. Items can alter an item's commonality.</p> <p>When the reels are reset, a weighted reel pool is built based on these commonality values. For example, if Common has a commonality of 5 and Rare has a commonality of 1, the chance of selecting a Common icon is 5/6, while Rare has a 1/6 chance.</p> Rarity Variable Rarity Name Rarity Commonality 1 Common 50 2 Uncommon 35 3 Rare 14 4 Legendary 1 <p></p>"},{"location":"crafting/#icon-list","title":"Icon List","text":"Icon Category Rarity Cherry Fruit Common Grapes Fruit Uncommon Lemon Fruit Rare Cornucopia Fruit Legendary Spoon Weapon Uncommon Joker Wild Legendary Mafia Man Curse Rare"},{"location":"crafting/#developer-information","title":"Developer Information","text":"<p>Icons are imported from <code>.json</code> files located in the <code>res://Data/Icons</code> folder. Each <code>.json</code> file must define a set of properties for the icon. Invalid information is discarded. The following fields are parsed:</p> <p><pre><code>tag                 Required. If missing, the icon will NOT be imported.\ncategory            Recommended. If missing, defaults to \"NULL\".\nset                 Recommended. If missing, defaults to \"NULL\".\nrarity              Recommended. Defaults to -1.\n\nname                Optional. Defaults to \"icon/[tag]\".\ncategory_name       Optional. Defaults to \"category/[category]\".\nset_name            Optional. Defaults to \"set/[set]\".\ntexture             Optional. Defaults to \"res://Data/Icons/Sprites/icon_[tag].png\". If missing, a NULL texture is assigned.\nin_machine          Optional. Defaults to \"false\".\n</code></pre> Note: <code>name</code>, <code>category_name</code>, and <code>set_name</code> are expected to correspond to localization keys. If not present in <code>localization.csv</code>, they may appear incorrectly in-game.</p> <p>Here is an example of an icon in a <code>.json</code> file: <pre><code>{\n    {\n        \"tag\" : \"cherry\",\n        \"category\" : \"fruit\",\n        \"set\" : \"set_1\",\n        \"rarity\" : 1,\n        \"in_machine\" : true,\n    }\n}\n</code></pre></p>"},{"location":"icons/","title":"Icons","text":"<p>Icons are the main mechanic of the slot machine. Different combinations of icons provide different payouts.</p>"},{"location":"icons/#list-of-icons","title":"List of Icons","text":""},{"location":"icons/#organic-icons","title":"Organic Icons","text":"<ul> <li>Wood</li> <li>Sap</li> <li>Vine</li> <li>Mushroom</li> <li>Glowing Mushroom</li> </ul>"},{"location":"icons/#mineral-icons","title":"Mineral Icons","text":"<ul> <li>Dirt</li> <li>Sand</li> <li>Ruby</li> <li>Sapphire</li> <li>Emerald</li> </ul>"},{"location":"icons/#metal-icons","title":"Metal Icons","text":"<ul> <li>Copper</li> <li>Tin</li> <li>Iron</li> <li>Sulfur</li> <li>Gold</li> <li>Silver</li> <li>Platinum</li> <li>Cobalt</li> <li>Tungsten</li> <li>Uranium</li> </ul>"},{"location":"icons/#relic-icons","title":"Relic Icons","text":"<ul> <li>Ancient Coin</li> <li>Human Skull</li> <li>Plastic</li> <li>Pottery Sherd</li> <li>Pterosaur Fossil</li> <li>Tyrannosauridae Fossil</li> </ul>"},{"location":"icons/#alien-icons","title":"Alien Icons","text":"<ul> <li>Alien Egg</li> <li>Alien Skull</li> <li>Broken Alien Weapon</li> <li>UFO Hull Piece</li> </ul>"},{"location":"icons/#wild-icons","title":"Wild Icons","text":"<p>Only one of each wild icon can be in the slot machine at one time.</p> <ul> <li>Clown</li> <li>Joker</li> <li>Jokesmith</li> <li>Prankster</li> </ul>"},{"location":"icons/#curse-icons","title":"Curse Icons","text":"<ul> <li>Bomb</li> <li>Durian</li> <li>Loan Shark</li> <li>Mafia Man</li> <li>Wraith</li> </ul>"},{"location":"icons/#modding-tutorial","title":"Modding Tutorial","text":""},{"location":"icons/#developer-information","title":"Developer Information","text":"<p>Icons are imported from <code>.json</code> files located in the <code>res://Data/Icons</code> folder. Each <code>.json</code> file must define a set of properties for the icon. Invalid information is discarded. The following fields are parsed:</p> <p><pre><code>tag                 Required. If missing, the icon will NOT be imported.\ncategory            Required. If missing, the icon will NOT be imported.\n\nname                Optional. Defaults to \"icon/[tag]\".\ncategory_name       Optional. Defaults to \"category/[category]\".\nset_name            Optional. Defaults to \"set/[set]\".\ntexture             Optional. Defaults to \"res://Slot Machine/Assets/Sprites/Icons/icon_[tag].png\". If missing, a NULL texture is assigned.\n</code></pre> Note: <code>name</code> and <code>category_name</code> are expected to correspond to localization keys. If not present in <code>localization.csv</code>, they may appear incorrectly in-game.</p> <p>Here is an example of an icon in a <code>.json</code> file: <pre><code>{\n    {\n        \"tag\" : \"wood\",\n        \"category\" : \"organic\",\n    }\n}\n</code></pre></p>"},{"location":"items/","title":"Items","text":"<p>Icons are the main mechanic of the slot machine. Different combinations of icons provide different payouts, and can provide money or items.</p>"},{"location":"json_loader/","title":"JSON Loader","text":"<p>Various databases for In the Hole are stored in JSON files that can be reloaded at runtime. Since multiple different databases use the same logic to obtain data from JSON, a JsonLoader class has been created to make it easier to load data from JSON.</p>"},{"location":"json_loader/#using-the-json-loader","title":"Using the JSON Loader","text":"<p>To use the JSON Loader in GDScript, you must first reference the JSON Loader in your script. It's best to put this with other <code>@onready</code> or constant variables. After the JSON Loader is referenced, simply call any functions you wish to use from that reference. Below is an example.</p> <pre><code>@onready var json_loader = JsonLoader\nvar data : Array = []\n\nfunc _ready() -&gt; void:\n    data = json_loader.load_all_json_from_folder([folder path])\n</code></pre>"},{"location":"json_loader/#json-loader-functionality","title":"JSON Loader Functionality","text":"<p>Currently, the JSON Loader only has one function:</p> <ul> <li>Load all JSON files from a given folder path. This returns an array containing dictionaries of all the loaded data.</li> </ul>"},{"location":"misc_dev/","title":"Misc. Dev Information","text":""},{"location":"misc_dev/#project-naming-schemes","title":"Project Naming Schemes","text":"<ul> <li>Folders in the Godot project should be named using proper title case.<ul> <li><code>This is an Example Folder Name</code></li> </ul> </li> <li>Files should be named using snake case.<ul> <li><code>this_is_an_example_file_name.gd</code></li> </ul> </li> <li>Functions should be named in the same way as files.<ul> <li>Function return and variable typings should be declared whenever possible.</li> <li>Private functions should be prefixed with an underscore.<ul> <li><code>func example_public_function(input : float) -&gt; void:</code></li> <li><code>func _example_private_function(input : float) -&gt; void:</code></li> </ul> </li> </ul> </li> <li>Variables should be named in the same way as files.<ul> <li>Variable typings should be declared whenever possible.</li> <li>Variable names should be descriptive; it is preferred to have verbose names rather than vague names.</li> <li>Private variables should be prefixed with an underscore.</li> <li>Constant variables and enums should be written in all caps.<ul> <li><code>var example_public_variable : bool = true</code></li> <li><code>var _example_private_variable : bool = true</code></li> <li><code>const EXAMPLE_CONST = : bool true</code></li> </ul> </li> <li>The following are improper variable names and should be avoided.<ul> <li><code>var a : bool = false</code></li> <li><code>var stupid_idiot_variable_for_dumb_babies := false</code></li> <li><code>var is_not_jumping2 = false</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"misc_dev/#project-organization","title":"Project Organization","text":"<p>The Godot project is structured based on main features, which are then grouped by asset type. Below is the example file structure that each main feature should follow. If a file doesn't fit into any one main feature, it should go in <code>res://General</code>.</p> <pre><code>res://\n\u2514\u2500\u2500 Slot Machine/\n    \u251c\u2500\u2500 Assets/\n    \u2502    \u251c\u2500\u2500 Audio/\n    \u2502    \u2502    \u2514\u2500\u2500 jackpot.wav\n    \u2502    \u2514\u2500\u2500 Images/\n    \u2502         \u2514\u2500\u2500 cherry_icon.png\n    \u251c\u2500\u2500 Data/\n    \u2502    \u2514\u2500\u2500 stats.gd\n    \u251c\u2500\u2500 Scenes/\n    \u2502    \u2514\u2500\u2500 player.tscn\n    \u2514\u2500\u2500 Scripts/\n         \u2514\u2500\u2500 player_controller.gd\n</code></pre>"},{"location":"payouts/","title":"Payouts","text":"<p>Payouts are triggered when a row of icons matches a predetermined payout. </p>"},{"location":"payouts/#payout-logic","title":"Payout Logic","text":"<p>The slot machine works based on a 3x3 grid. Icons are considered \"matching\", triggering a payout, if one of the following rows matches an existing payout: </p> <ul> <li>The top row.</li> <li>The middle row.</li> <li>The bottom row.</li> <li>The diagonal row from top left to bottom right.</li> <li>The diagonal row from bottom left to top right.</li> </ul> <p>In the following example, the rows would be as follows:</p> <p>|  -|-  -|-  | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/ |  -|-  -|  | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\ |  -|-  |-  |</p> <ul> <li>Cherry, Grapes, Cherry</li> <li>Cherry, Lemon, Cherry</li> <li>Cherry, Grapes, Lemon</li> <li>Cherry, Lemon, Cherry</li> <li>Cherry, Lemon, Cherry</li> </ul> <p>A payout row can be in any order, meaning that the row <code>Cherry, Cherry, Lemon</code> would be handled identically as <code>Lemon, Cherry, Cherry</code>.</p> <p></p>"},{"location":"payouts/#fruit-payouts","title":"Fruit Payouts","text":"Row Payout Payout Name $1 Triple Cherries $5 Double Cherries, Single Grape $25 Double Cherries, Single Lemon $10 Triple Grapes $35 Double Grapes, Single Lemon $50 Triple Lemon $5,000 Triple Cornucopia"},{"location":"payouts/#weapon-payouts","title":"Weapon Payouts","text":"Row Payout Payout Name Triple Spoon"},{"location":"payouts/#ability-payouts","title":"Ability Payouts","text":"Row Payout Payout Name"},{"location":"payouts/#wild-payouts","title":"Wild Payouts","text":"Row Payout Payout Name N/A Joker Fever"},{"location":"payouts/#curse-payouts","title":"Curse Payouts","text":"Row Payout Payout Name -$1,000 added to the player's debt Triple Mafia Man"},{"location":"payouts/#developer-information","title":"Developer Information","text":"<p>Icons are imported from <code>.json</code> files located in the <code>res://Data/Icons</code> folder. Each <code>.json</code> file must define a set of properties for the icon. Invalid information is discarded. The following fields are parsed:</p> <pre><code>tag                 Required. If missing, the icon will NOT be imported.\nmatch               Required. An array of the icon IDs required to achieve the match. If missing, defaults to \"NULL\", meaning the payout can never be achieved.\nreward_money        Optional. The amount of money rewarded. If missing, the payout will not reward money.\nreward_item         Optional. The tag (or array of tags) of the item reward. If missing, the payout will not reward an item.\n\nmatch_array_str     Auto-Generated. A string version of the match array to speed up processing of matches.\n</code></pre> <p>Here is an example of a payouts in a <code>.json</code> file: <pre><code>{\n    {\n        \"tag\" : \"trip_cherry\",\n        \"match\" : [\"cherry\", \"cherry\", \"cherry\"],\n        \"reward_money\" : 5,\n    },\n\n    {\n        \"tag\" : \"trip_spoon\",\n        \"match\" : [\"spoon\", \"spoon\", \"spoon\"],\n        \"reward_item\" : \"spoon\",\n    },\n}\n</code></pre></p>"},{"location":"slot_machine/","title":"Slot Machine","text":"<p>The following is an explanation for how the slot machine and the various scripts responsible for the slot machine work.</p>"},{"location":"slot_machine/#visual-representation","title":"Visual Representation","text":""},{"location":"slot_machine/#icons","title":"Icons","text":"<p>Icon data is stored as JSON files in the <code>res://Data/Icons</code> directory. This JSON data is then loaded by <code>icon_database.gd</code> and converted from JSON to an IconData Godot Resource, which is defined in <code>icon_data.gd</code>. All of the loaded IconData information is stored in the <code>icons</code> dictionary, which is accessible using <code>IconDB.icons[icon_tag]</code>.</p>"},{"location":"slot_machine/#payouts","title":"Payouts","text":"<p>Payout data is stored as JSON files in the <code>res://Data/Payouts</code> directory. This JSON data is then loaded by <code>payout_database.gd</code> and converted from JSON to a PayoutData Godot Resource, which is defined in <code>payout_data.gd</code>. All of the loaded PayoutData information is then stored in two dictionaries, <code>payouts_by_tag</code> and <code>payouts_by_match</code>. These two dictionaries are identical except for the key used to define the data; one uses the tag, and the other uses the match string defined in <code>payout_data.gd</code>. Data is accessible using <code>PayoutDB.payouts_by_tag[payout_tag]</code> or <code>PayoutDB.payouts_by_match[match_string]</code>.</p> <p>The reason two dictionaries exist is that <code>payouts_by_tag</code> is better for human readable purposes, like searching for information about a certain payout, while <code>payouts_by_match</code> is better for processing in the slot machine, since rather than looping through each dictionary key value pair, the slot machine can quickly search for the match key instead.</p>"},{"location":"slot_machine/#the-slot-machine","title":"The Slot Machine","text":"<p>The slot machine then accesses information from the icon and payout databases using various accessors defined in their resource or database files.</p>"},{"location":"world_generation/","title":"Icons","text":"<p>Icons are the main mechanic of the slot machine. Different combinations of icons provide different payouts, and can provide money or items.  </p>"},{"location":"world_generation/#default-icons","title":"Default Icons","text":"<p>The slot machine starts with 7 icons:      </p>"},{"location":"world_generation/#icon-types","title":"Icon Types","text":"<p>Fruit icons give the player money for the current run.  </p> <p>Weapon and Ability icons give the player items for the current run. </p> <p>Wild icons count as every icon at the same time, excluding wild icons and curse icons. </p> <p>Curse icons negatively impact the player by adding to their debt, removing icons, or adding additional curse icons. </p>"},{"location":"world_generation/#icon-rarity","title":"Icon Rarity","text":"<p>Each icon has a <code>rarity</code> value defined in its metadata, represented as an integer. This integer maps to a named rarity (e.g., Common, Uncommon, etc.) for ease of communication. Additionally, each rarity is assigned a <code>commonality</code> value that determines how likely it is to appear in the slot machine. Items can alter an item's commonality.</p> <p>When the reels are reset, a weighted reel pool is built based on these commonality values. For example, if Common has a commonality of 5 and Rare has a commonality of 1, the chance of selecting a Common icon is 5/6, while Rare has a 1/6 chance.</p> Rarity Variable Rarity Name Rarity Commonality 1 Common 50 2 Uncommon 35 3 Rare 14 4 Legendary 1 <p></p>"},{"location":"world_generation/#icon-list","title":"Icon List","text":"Icon Category Rarity Cherry Fruit Common Grapes Fruit Uncommon Lemon Fruit Rare Cornucopia Fruit Legendary Spoon Weapon Uncommon Joker Wild Legendary Mafia Man Curse Rare"},{"location":"world_generation/#developer-information","title":"Developer Information","text":"<p>Icons are imported from <code>.json</code> files located in the <code>res://Data/Icons</code> folder. Each <code>.json</code> file must define a set of properties for the icon. Invalid information is discarded. The following fields are parsed:</p> <p><pre><code>tag                 Required. If missing, the icon will NOT be imported.\ncategory            Recommended. If missing, defaults to \"NULL\".\nset                 Recommended. If missing, defaults to \"NULL\".\nrarity              Recommended. Defaults to -1.\n\nname                Optional. Defaults to \"icon/[tag]\".\ncategory_name       Optional. Defaults to \"category/[category]\".\nset_name            Optional. Defaults to \"set/[set]\".\ntexture             Optional. Defaults to \"res://Data/Icons/Sprites/icon_[tag].png\". If missing, a NULL texture is assigned.\nin_machine          Optional. Defaults to \"false\".\n</code></pre> Note: <code>name</code>, <code>category_name</code>, and <code>set_name</code> are expected to correspond to localization keys. If not present in <code>localization.csv</code>, they may appear incorrectly in-game.</p> <p>Here is an example of an icon in a <code>.json</code> file: <pre><code>{\n    {\n        \"tag\" : \"cherry\",\n        \"category\" : \"fruit\",\n        \"set\" : \"set_1\",\n        \"rarity\" : 1,\n        \"in_machine\" : true,\n    }\n}\n</code></pre></p>"},{"location":"player/digging_component/","title":"Digging Component","text":"<p>The digging component is of class <code>DiggingComponent</code> and handles the player's digging state.</p>"},{"location":"player/digging_component/#methods","title":"Methods","text":"Return Name void <code>determine_dig_state(delta : float, can_dig : bool, target_coords : Vector2i, player_coords : Vector2i, target_cell_id : int, cur_tool, terrain : TileMapLayer)</code>"},{"location":"player/digging_component/#signals","title":"Signals","text":"Signal <code>dig_overlay_set_frame(coords : Vector2i, progress : int)</code> <code>clear_dig_overlay(coords : Vector2i)</code> <code>dig_complete(coords : Vector2i)</code> <code>update_max_stamina(amount : float)</code>"},{"location":"player/digging_component/#method-descriptions","title":"Method Descriptions","text":""},{"location":"player/digging_component/#void-determine_dig_statedelta-float-can_dig-bool-target_coords-vector2i-player_coords-vector2i-target_cell_id-int-cur_tool-terrain-tilemaplayer","title":"<code>void</code> - <code>determine_dig_state(delta : float, can_dig : bool, target_coords : Vector2i, player_coords : Vector2i, target_cell_id : int, cur_tool, terrain : TileMapLayer)</code>","text":"<ul> <li>Updates the current digging state the player is in.</li> <li>Will prevent digging if the player is out of stamina.</li> </ul>"},{"location":"player/digging_component/#signal-descriptions","title":"Signal Descriptions","text":""},{"location":"player/digging_component/#dig_overlay_set_framecoords-vector2i-progress-int","title":"<code>dig_overlay_set_frame(coords : Vector2i, progress : int)</code>","text":"<ul> <li>Sends out the signal to update the frame dig overlay at <code>coords</code> to frame <code>progress</code>.</li> </ul>"},{"location":"player/digging_component/#clear_dig_overlaycoords-vector2i","title":"<code>clear_dig_overlay(coords : Vector2i)</code>","text":"<ul> <li>Sends out the signal to clear the digging animation cell at <code>coords</code>.</li> </ul>"},{"location":"player/digging_component/#dig_completecoords-vector2i","title":"<code>dig_complete(coords : Vector2i)</code>","text":"<ul> <li>Sends out the signal that a successful dig was preformed at <code>coords</code>.</li> </ul>"},{"location":"player/digging_component/#update_max_staminaamount-float","title":"<code>update_max_stamina(amount : float)</code>","text":"<ul> <li>Sends out the signal to reduce the player's maximum stamina after mining a cell.</li> </ul>"},{"location":"player/movement_component/","title":"Movement Component","text":"<p>The movement component is of class <code>MovementComponent</code> and handles the player's velocity.</p>"},{"location":"player/movement_component/#properties","title":"Properties","text":"Type Name Default CharacterBody2D <code>body</code> N/A float <code>walk_move_speed</code> 100.0 float <code>sprint_speed_multiplier</code> 2.0 float <code>acc</code> 600.0 float <code>dec</code> 800.0 float <code>jump_velocity</code> -200.0 float <code>coyote_time_max</code> 0.15"},{"location":"player/movement_component/#methods","title":"Methods","text":"Return Name void <code>initialize(_body : CharacterBody2D)</code> void <code>update(delta : float, is_jumping : bool, move_dir : float, sprinting : bool)</code>"},{"location":"player/movement_component/#property-descriptions","title":"Property Descriptions","text":""},{"location":"player/movement_component/#characterbody2d-body","title":"<code>CharacterBody2D</code> - <code>body</code>","text":"<ul> <li>The body that velocity is applied to,</li> </ul>"},{"location":"player/movement_component/#float-walk_move_speed","title":"<code>float</code> - <code>walk_move_speed</code>","text":"<ul> <li>How quickly the player moves when walking. </li> </ul>"},{"location":"player/movement_component/#float-sprint_speed_multiplier","title":"<code>float</code> - <code>sprint_speed_multiplier</code>","text":"<ul> <li>The multiplier applied to the player's movement speed when sprinting.</li> </ul>"},{"location":"player/movement_component/#float-acc","title":"<code>float</code> - <code>acc</code>","text":"<ul> <li>How quickly the player accelerates.</li> </ul>"},{"location":"player/movement_component/#float-dec","title":"<code>float</code> - <code>dec</code>","text":"<ul> <li>How quickly the player decelerates.</li> </ul>"},{"location":"player/movement_component/#float-jump_velocity","title":"<code>float</code> - <code>jump_velocity</code>","text":"<ul> <li>How strong the player's jump is.</li> </ul>"},{"location":"player/movement_component/#float-coyote_time_max","title":"<code>float</code> - <code>coyote_time_max</code>","text":"<ul> <li>\"Coyote time\" is a grace period after walking off a ledge where a player can still jump. </li> </ul>"},{"location":"player/movement_component/#method-descriptions","title":"Method Descriptions","text":""},{"location":"player/movement_component/#void-initialize_body-characterbody2d","title":"<code>void</code> - <code>initialize(_body : CharacterBody2D)</code>","text":"<ul> <li>Assigns a passed <code>CharacterBody2D</code> as the body this component will manipulate.</li> </ul>"},{"location":"player/movement_component/#void-updatedelta-float-is_jumping-bool-move_dir-float-sprinting-bool","title":"<code>void</code> - <code>update(delta : float, is_jumping : bool, move_dir : float, sprinting : bool)</code>","text":"<ul> <li>Applies gravity on the player.</li> <li>Checks and updates for coyote time.</li> <li>Applies jumping velocity.</li> <li>Applies horizontal velocity.</li> </ul>"},{"location":"player/player/","title":"Player","text":"<p>The player controller is separated into various <code>components</code> that handle the different aspects of what the player can do. The player controller script <code>player.gd</code> handles input, connects all of the component scripts, and updates UI elements accordingly.</p>"},{"location":"player/stamina_component/","title":"Stamina Component","text":"<p>The stamina component is of class <code>StaminaComponent</code> and handles the player's stamina state. It provides functions to update the stamina cap, maximum stamina, and current stamina.</p> <p>The stamina component also manages the player's sprinting state.</p>"},{"location":"player/stamina_component/#properties","title":"Properties","text":"Type Name Default float <code>cap_stamina</code> 100.0 float <code>max_stamina</code> <code>cap_stamina</code> float <code>cur_stamina</code> <code>cap_stamina</code> float <code>sprint_drain_speed</code> 10.0 float <code>regen_speed</code> 5.0 bool <code>stamina_drained</code> false"},{"location":"player/stamina_component/#methods","title":"Methods","text":"Return Name void <code>update(delta : float, draining : bool)</code> void <code>add_cur(amount : float)</code> void <code>add_max(amount : float)</code> void <code>add_cap(amount : float)</code> void <code>drain()</code> void <code>restore()</code>"},{"location":"player/stamina_component/#signals","title":"Signals","text":"Signal <code>update_max_stamina(cap : float, max : float)</code> <code>update_cur_stamina(cap : float, cur : float)</code> <code>update_stamina_drained(drained : bool)</code>"},{"location":"player/stamina_component/#property-descriptions","title":"Property Descriptions","text":""},{"location":"player/stamina_component/#float-cap_stamina","title":"<code>float</code> - <code>cap_stamina</code>","text":"<ul> <li>The absolute maximum stamina the player can have.</li> <li>This is different from <code>max_stamina</code> because <code>max_stamina</code> fluctuates often from digging, items, and abilities.</li> <li>This is denoted by the entire stamina bar (black, yellow, and green).</li> </ul>"},{"location":"player/stamina_component/#float-max_stamina","title":"<code>float</code> - <code>max_stamina</code>","text":"<ul> <li>The current maximum usable stamina the player has.</li> <li>This fluctuates often, most notably from digging.</li> <li>This is denoted by the yellow and green sections of the stamina bar.</li> </ul>"},{"location":"player/stamina_component/#float-cur_stamina","title":"<code>float</code> - <code>cur_stamina</code>","text":"<ul> <li>The current usable stamina the player has.</li> <li>This is used for actions like sprinting.</li> <li>This is denoted by the green section of the stamina bar.</li> </ul>"},{"location":"player/stamina_component/#float-sprint_drain_speed","title":"<code>float</code> - <code>sprint_drain_speed</code>","text":"<ul> <li>How fast the player's stamina drains while sprinting.</li> </ul>"},{"location":"player/stamina_component/#float-regen_speed","title":"<code>float</code> - <code>regen_speed</code>","text":"<ul> <li>How quickly the player's stamina regenerates when not sprinting.</li> </ul>"},{"location":"player/stamina_component/#bool-stamina_drained","title":"<code>bool</code> - <code>stamina_drained</code>","text":"<ul> <li>Whether the player's stamina has been drained.</li> <li>When the player's stamina is drained, they cannot mine or sprint.</li> <li>If the player's stamina is drained, the yellow and green sections of the stamina bar appear red.</li> </ul>"},{"location":"player/stamina_component/#method-descriptions","title":"Method Descriptions","text":""},{"location":"player/stamina_component/#void-updatedelta-float-draining-bool","title":"<code>void</code> - <code>update(delta : float, draining : bool)</code>","text":"<ul> <li>Updates the player's passive stamina.</li> <li>Regenerates if no stamina is being used, drains when sprinting.</li> <li>Keeps track of whether stamina has been drained or not.</li> </ul>"},{"location":"player/stamina_component/#void-add_curamount-float","title":"<code>void</code> - <code>add_cur(amount : float)</code>","text":"<ul> <li>Adds <code>amount</code> to the player's current stamina.</li> <li>Despite the name being \"add,\" this function is used for both addition and subtraction.</li> </ul>"},{"location":"player/stamina_component/#void-add_maxamount-float","title":"<code>void</code> - <code>add_max(amount : float)</code>","text":"<ul> <li>Adds <code>amount</code> to the player's maximum stamina.</li> <li>Despite the name being \"add,\" this function is used for both addition and subtraction.</li> </ul>"},{"location":"player/stamina_component/#void-add_capamount-float","title":"<code>void</code> - <code>add_cap(amount : float)</code>","text":"<ul> <li>Adds <code>amount</code> to the player's stamina cap.</li> <li>Despite the name being \"add,\" this function is used for both addition and subtraction.</li> </ul>"},{"location":"player/stamina_component/#void-drain","title":"<code>void</code> - <code>drain()</code>","text":"<ul> <li>Sets <code>stamina_drained</code> to true.</li> <li>Also sets <code>current_stamina</code> to 0.0.</li> </ul>"},{"location":"player/stamina_component/#void-restore","title":"<code>void</code> - <code>restore()</code>","text":"<ul> <li>Sets <code>stamina_drained</code> to false.</li> <li>Also sets <code>current_stamina</code> to <code>max_stamina</code>.</li> </ul>"},{"location":"player/stamina_component/#signal-descriptions","title":"Signal Descriptions","text":""},{"location":"player/stamina_component/#update_max_staminacap-float-max-float","title":"<code>update_max_stamina(cap : float, max : float)</code>","text":"<ul> <li>Signals an update the maximum stamina.</li> <li>For the player, this updates the HUD.</li> </ul>"},{"location":"player/stamina_component/#update_cur_staminacap-float-cur-float","title":"<code>update_cur_stamina(cap : float, cur : float)</code>","text":"<ul> <li>Signals an update to the current stamina.</li> <li>For the player, this updates the HUD.</li> </ul>"},{"location":"player/stamina_component/#update_stamina_draineddrained-bool","title":"<code>update_stamina_drained(drained : bool)</code>","text":"<ul> <li>Signals an update to the state of drained stamina.</li> <li>For the player, this updates the HUD.</li> </ul>"}]}